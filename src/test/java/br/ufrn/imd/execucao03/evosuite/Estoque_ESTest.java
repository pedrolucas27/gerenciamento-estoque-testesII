/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 15 20:32:51 GMT 2024
 */

package br.ufrn.imd.execucao03.evosuite;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import br.ufrn.imd.Estoque;
import br.ufrn.imd.Produto;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Estoque_ESTest extends Estoque_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Estoque estoque0 = new Estoque();
      Produto produto0 = new Produto("G;X)=E,2%X", "G;X)=E,2%X", 0.0);
      estoque0.inserirProduto(produto0, 0);
      estoque0.removerProduto("G;X)=E,2%X", 1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Estoque estoque0 = new Estoque();
      Produto produto0 = new Produto("", "", 256.85403094);
      estoque0.inserirProduto(produto0, 700);
      estoque0.removerProduto("", 1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Estoque estoque0 = new Estoque();
      Produto produto0 = new Produto("", "", 256.85403094);
      estoque0.inserirProduto(produto0, 0);
      estoque0.inserirProduto(produto0, 700);
      assertEquals("", produto0.getNome());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Estoque estoque0 = new Estoque();
      Produto produto0 = new Produto("", "", 256.85403094);
      estoque0.inserirProduto(produto0, 700);
      int int0 = estoque0.consultarQuantidade("");
      assertEquals(700, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Estoque estoque0 = new Estoque();
      Produto produto0 = new Produto("cTHic'[j-V~ok", "cTHic'[j-V~ok", 1.0);
      estoque0.inserirProduto(produto0, (-1));
      int int0 = estoque0.consultarQuantidade("cTHic'[j-V~ok");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Estoque estoque0 = new Estoque();
      // Undeclared exception!
      try { 
        estoque0.inserirProduto((Produto) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.ufrn.imd.Estoque", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Estoque estoque0 = new Estoque();
      boolean boolean0 = estoque0.produtoExiste("hbcob1v=iEh^J:?A]");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Estoque estoque0 = new Estoque();
      Produto produto0 = new Produto("", "", 256.85403094);
      estoque0.inserirProduto(produto0, 0);
      boolean boolean0 = estoque0.produtoExiste("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Estoque estoque0 = new Estoque();
      Produto produto0 = new Produto("", "", 256.85403094);
      estoque0.inserirProduto(produto0, 0);
      int int0 = estoque0.consultarQuantidade("");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Estoque estoque0 = new Estoque();
      int int0 = estoque0.consultarQuantidade("");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Estoque estoque0 = new Estoque();
      try { 
        estoque0.removerProduto("br.ufrn.id.Estoqu", (-1193));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // O produto de c\u00F3digo br.ufrn.id.Estoqu n\u00E3o existe no estoque.
         //
         verifyException("br.ufrn.imd.Estoque", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Estoque estoque0 = new Estoque();
      Produto produto0 = new Produto("", "", 2631.9403057);
      estoque0.inserirProduto(produto0, (-1193));
      estoque0.removerProduto("", (-1193));
  }
}
