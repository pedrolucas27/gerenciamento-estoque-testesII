/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 15 20:28:05 GMT 2024
 */

package br.ufrn.imd.execucao02.evosuite;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import br.ufrn.imd.Estoque;
import br.ufrn.imd.Produto;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Estoque_ESTest extends Estoque_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Estoque estoque0 = new Estoque();
      Produto produto0 = new Produto("$4J.0G``mE3iCx:", "a*#CcS5C", (-640.89407117));
      estoque0.inserirProduto(produto0, 4457);
      estoque0.removerProduto("a*#CcS5C", (-2454));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Estoque estoque0 = new Estoque();
      Produto produto0 = new Produto("HPf=g\"(8F0^^{@0V", " n\u00E3o existe no estoque.", 0.0);
      produto0.setCodigo("br.ufrn.imd.Produto");
      estoque0.inserirProduto(produto0, 1);
      int int0 = estoque0.consultarQuantidade("br.ufrn.imd.Produto");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Estoque estoque0 = new Estoque();
      // Undeclared exception!
      try { 
        estoque0.inserirProduto((Produto) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.ufrn.imd.Estoque", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Estoque estoque0 = new Estoque();
      boolean boolean0 = estoque0.produtoExiste("Z7f");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Estoque estoque0 = new Estoque();
      Produto produto0 = new Produto("wcX<Bf`[.<", "wcX<Bf`[.<", (-451.55661028));
      estoque0.inserirProduto(produto0, (-1));
      boolean boolean0 = estoque0.produtoExiste("wcX<Bf`[.<");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Estoque estoque0 = new Estoque();
      Produto produto0 = new Produto((String) null, (String) null, (-3326.0));
      estoque0.inserirProduto(produto0, (-2407));
      int int0 = estoque0.consultarQuantidade((String) null);
      assertEquals((-2407), int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Estoque estoque0 = new Estoque();
      int int0 = estoque0.consultarQuantidade("");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Estoque estoque0 = new Estoque();
      Produto produto0 = new Produto("a", "a", (-148.0797037054882));
      estoque0.inserirProduto(produto0, (-44738869));
      estoque0.removerProduto("a", (-374));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Estoque estoque0 = new Estoque();
      try { 
        estoque0.removerProduto(" n\u00E3o existe no estoque.", (-4288));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // O produto de c\u00F3digo  n\u00E3o existe no estoque. n\u00E3o existe no estoque.
         //
         verifyException("br.ufrn.imd.Estoque", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Estoque estoque0 = new Estoque();
      Produto produto0 = new Produto("a", "a", (-148.0797037054882));
      estoque0.inserirProduto(produto0, (-44738869));
      estoque0.removerProduto("a", (-44738869));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Estoque estoque0 = new Estoque();
      Produto produto0 = new Produto("a", "a", (-148.0797037054882));
      estoque0.inserirProduto(produto0, (-44738869));
      estoque0.inserirProduto(produto0, (-374));
      assertEquals("a", produto0.getNome());
  }
}
